apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "clusterpedia.clustersynchroManager.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels: {{- include "common.labels.standard" . | nindent 4 }}
    app: {{ include "clusterpedia.clustersynchroManager.fullname" . }}
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  replicas: {{  .Values.clustersynchroManager.replicaCount }}
  selector:
    matchLabels: {{- include "common.labels.matchLabels" . | nindent 6 }}
      app: {{ include "clusterpedia.clustersynchroManager.fullname" . }}
  template:
    metadata:
      {{- if .Values.clustersynchroManager.podAnnotations }}
      annotations:
      {{- include "common.tplvalues.render" (dict "value" .Values.clustersynchroManager.podAnnotations "context" $) | nindent 8 }}
      {{- end }}
      labels: {{- include "common.labels.standard" . | nindent 8 }}
        app: {{ include "clusterpedia.clustersynchroManager.fullname" . }}
        {{- if .Values.podLabels }}
        {{- include "common.tplvalues.render" (dict "value" .Values.clustersynchroManager.podLabels "context" $) | nindent 8 }}
        {{- end }}
    spec:
      {{- include "clusterpedia.clustersynchroManager.imagePullSecrets" . | nindent 6 }}
      initContainers:
    {{- if .Values.externalStorage.createDatabase }}
      - name: ensure-database
        image: {{ include "clusterpedia.storage.image" . }}
        command:
          - /bin/bash
          - -ec
          {{- if eq (include "clusterpedia.storage.type" .) "postgres" }}
          - |
            # Load YAML data into a Bash variable
            if [ -n ${DB_DSN} ]; then source /opt/scripts/parse-yaml.sh; create_variables ${DB_DSN}; fi;
            until psql -U ${DB_USER} -h ${DB_HOST} -p ${DB_PORT} postgres -c "SELECT 1 FROM pg_database WHERE datname = '{{ include "clusterpedia.storage.database" . }}'" | grep -q 1 || psql -U ${DB_USER} -h ${DB_HOST} -p ${DB_PORT} postgres -c "CREATE DATABASE {{ include "clusterpedia.storage.database" . }} owner ${DB_USER} " -c "GRANT ALL PRIVILEGES ON DATABASE {{ include "clusterpedia.storage.database" . }} to ${DB_USER} "; do
            echo waiting for database check && sleep 1;
            done;
            echo 'DataBase OK ✓'
          {{- else if eq (include "clusterpedia.storage.type" .) "mysql" }}
          - |
            # Load YAML data into a Bash variable
            if [ -n ${DB_DSN} ]; then source /opt/scripts/parse-yaml.sh; create_variables ${DB_DSN}; fi;
            until mysql -u${DB_USER} -p${DB_PASSWORD} --host=${DB_HOST} --port=${DB_PORT} -e 'CREATE DATABASE IF NOT EXISTS {{ include "clusterpedia.storage.database" . }}'; do
            echo waiting for database check && sleep 1; 
            done;
            echo 'DataBase OK ✓'
          {{- end }}
        envFrom:
          - secretRef:
              name: {{ include "clusterpedia.internalstorage.fullname" . }}
        env:
          - name: {{ include "clusterpedia.storage.password.envKey" . }}
            valueFrom:
              secretKeyRef:
                name: {{ include "clusterpedia.internalstorage.fullname" . }}
                key: DB_PASSWORD
        volumeMounts:
        - name: scripts
          mountPath: /opt/scripts
          readOnly: true
    {{- else }}
      - name: check-storage
        image: {{ include "clusterpedia.storage.image" . }}
        command: 
          - /bin/bash
          - -ec
          {{- if eq (include "clusterpedia.storage.type" .) "postgres" }}
          - |
            # Load YAML data into a Bash variable
            if [ -n ${DB_DSN} ]; then source /opt/scripts/parse-yaml.sh; create_variables ${DB_DSN}; fi;
            until pg_isready -U ${DB_USER} -d "dbname=${DB_DATABASE}" -h ${DB_HOST} -p ${DB_PORT}; do
            echo waiting for database check && sleep 1; 
            done;
            echo 'DataBase OK ✓'
          {{- else if eq (include "clusterpedia.storage.type" .) "mysql" }}
          - |
            # Load YAML data into a Bash variable
            if [ -n ${DB_DSN} ]; then source /opt/scripts/parse-yaml.sh; create_variables ${DB_DSN}; fi;
            until mysqladmin status -u${DB_USER} -p${DB_PASSWORD} --host=${DB_HOST} --port=${DB_PORT}; do
            echo waiting for database check && sleep 1; 
            done;
            echo 'DataBase OK ✓'
          {{- end }}
        envFrom:
          - secretRef:
              name: {{ include "clusterpedia.internalstorage.fullname" . }}
        volumeMounts:
        - name: scripts
          mountPath: /opt/scripts
          readOnly: true
    {{- end }}
      containers:
      - name: {{ include "clusterpedia.clustersynchroManager.fullname" . }}
        image: {{ template "clusterpedia.clustersynchroManager.image" . }}
        imagePullPolicy: {{ .Values.clustersynchroManager.image.pullPolicy }}
        command:
        - /usr/local/bin/clustersynchro-manager
        - --storage-config=/etc/clusterpedia/storage/internalstorage-config.yaml
        - --leader-elect-resource-namespace={{ .Release.Namespace }}
        - --leader-elect-lease-duration={{ .Values.clustersynchroManager.leaderElect.leaseDuration }}
        - --leader-elect-renew-deadline={{ .Values.clustersynchroManager.leaderElect.renewDeadline }}
        - --leader-elect-retry-period={{ .Values.clustersynchroManager.leaderElect.retryPeriod }}
        - --leader-elect-resource-lock={{ .Values.clustersynchroManager.leaderElect.resourceLock }}
        - --worker-number={{ .Values.clustersynchroManager.workerNumber }}
        {{- if .Values.clustersynchroManager.kubeStateMetrics.enabled }}
        - --enable-kube-state-metrics
        {{- end }}
        {{- with (include "clusterpedia.clustersynchroManager.featureGates" .) }}
        - {{ . }}
        {{- end }}
        {{- if .Values.clustersynchroManager.resources }}
        resources: {{- toYaml .Values.clustersynchroManager.resources | nindent 12 }}
        {{- end }}
        envFrom:
          - secretRef:
              name: {{ include "clusterpedia.internalstorage.fullname" . }}
        env:
          - name: GODEBUG
            value: netdns=go
        volumeMounts:
          - name: internalstorage-config
            mountPath: /etc/clusterpedia/storage
            readOnly: true
      serviceAccountName: {{ include "clusterpedia.clustersynchroManager.fullname" . }}
      {{- if .Values.clustersynchroManager.affinity }}
      affinity: {{- include "common.tplvalues.render" (dict "value" .Values.clustersynchroManager.affinity "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.clustersynchroManager.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" (dict "value" .Values.clustersynchroManager.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.clustersynchroManager.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.clustersynchroManager.tolerations "context" $) | nindent 8 }}
      {{- end }}
      volumes:
        - name: internalstorage-connection-config
          secret:
            secretName: {{ include "clusterpedia.internalstorage.fullname" . }}
        - name: internalstorage-config
          configMap:
            name: {{ include "clusterpedia.internalstorage.fullname" . }}
        - name: scripts
          configMap:
            name: {{ include "clusterpedia.scripts.fullname" . }}
